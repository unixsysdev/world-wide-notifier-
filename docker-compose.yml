services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: monitoring_db
      POSTGRES_USER: monitoring_user
      POSTGRES_PASSWORD: monitoring_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - monitoring_net

  # Redis Queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monitoring_net

  # MongoDB for Raw Data Storage
  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=monitoring_user
      - MONGO_INITDB_ROOT_PASSWORD=monitoring_pass
      - MONGO_INITDB_DATABASE=monitoring_raw_data
    volumes:
      - mongodb_data:/data/db
    networks:
      - monitoring_net

  # Main API Service
  api_service:
    build: ./api_service
    image: monitoring_api_service
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://monitoring_user:monitoring_pass@postgres:5432/monitoring_db
      - REDIS_URL=redis://redis:6379
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - INTERNAL_API_KEY=${INTERNAL_API_KEY:-internal-service-key-change-in-production}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PREMIUM_PRICE_ID=${STRIPE_PREMIUM_PRICE_ID}
      - STRIPE_PREMIUM_PLUS_PRICE_ID=${STRIPE_PREMIUM_PLUS_PRICE_ID}
      - HOSTNAME=${HOSTNAME:-http://localhost:3000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - DATA_STORAGE_URL=http://data_storage_service:8004
    depends_on:
      - postgres
      - redis
      - data_storage_service
    volumes:
      - ./api_service:/app
    networks:
      - monitoring_net

  # Browser Service
  browser_service:
    build: ./browser_service
    image: monitoring_browser_service
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - INTERNAL_API_KEY=${INTERNAL_API_KEY:-internal-service-key-change-in-production}
    depends_on:
      - redis
    volumes:
      - browser_data:/app/browser_data
    networks:
      - monitoring_net
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Worker Manager
  worker_manager:
    build: ./worker_manager
    image: monitoring_worker_manager
    environment:
      - DATABASE_URL=postgresql://monitoring_user:monitoring_pass@postgres:5432/monitoring_db
      - REDIS_URL=redis://redis:6379
      - BROWSER_SERVICE_URL=http://browser_service:8001
      - LLM_SERVICE_URL=http://llm_service:8002
      - DATA_STORAGE_URL=http://data_storage_service:8004
      - HOSTNAME=${HOSTNAME:-http://localhost:3000}
      - INTERNAL_API_KEY=${INTERNAL_API_KEY:-internal-service-key-change-in-production}
    depends_on:
      - postgres
      - redis
      - browser_service
      - data_storage_service
    volumes:
      - ./worker_manager:/app
    networks:
      - monitoring_net

  # LLM Analysis Service
  llm_service:
    build: ./llm_service
    image: monitoring_llm_service
    ports:
      - "8002:8002"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - REDIS_URL=redis://redis:6379
      - INTERNAL_API_KEY=${INTERNAL_API_KEY:-internal-service-key-change-in-production}
    depends_on:
      - redis
    volumes:
      - ./llm_service:/app
    networks:
      - monitoring_net

  # Notification Service
  notification_service:
    build: ./notification_service
    image: monitoring_notification_service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://monitoring_user:monitoring_pass@postgres:5432/monitoring_db
      - REDIS_URL=redis://redis:6379
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - NOTIFICATION_EMAIL=${NOTIFICATION_EMAIL}
      - TEAMS_WEBHOOK=${TEAMS_WEBHOOK}
      - HOSTNAME=${HOSTNAME:-http://localhost:3000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - INTERNAL_API_KEY=${INTERNAL_API_KEY:-internal-service-key-change-in-production}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./notification_service:/app
    networks:
      - monitoring_net

  # Data Storage Service
  data_storage_service:
    build: ./data_storage_service
    image: monitoring_data_storage_service
    ports:
      - "8004:8004"
    environment:
      - MONGODB_URL=mongodb://monitoring_user:monitoring_pass@mongodb:27017/monitoring_raw_data?authSource=admin
      - REDIS_URL=redis://redis:6379
      - INTERNAL_API_KEY=${INTERNAL_API_KEY:-internal-service-key-change-in-production}
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./data_storage_service:/app
    networks:
      - monitoring_net

  # Frontend React App
  frontend:
    build: ./frontend
    image: monitoring_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:8000}
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - api_service
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - monitoring_net

  # E2E Test Service
  test_service:
    build: ./test_service
    image: monitoring_test_service
    environment:
      - INTERNAL_API_KEY=${INTERNAL_API_KEY:-internal-service-key-change-in-production}
    depends_on:
      - api_service
      - browser_service
      - llm_service
      - notification_service
      - redis
    networks:
      - monitoring_net
    profiles:
      - test

volumes:
  postgres_data:
  redis_data:
  browser_data:
  mongodb_data:

networks:
  monitoring_net:
    driver: bridge
